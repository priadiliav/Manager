// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Server.Infrastructure.Configs;

#nullable disable

namespace Server.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Server.Domain.Models.Agent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("ConfigurationId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("LastStatusChangeAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("SecretHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("SecretSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("Server.Domain.Models.Configuration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("Server.Domain.Models.Hardware", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid>("AgentId")
                        .HasColumnType("uuid");

                    b.Property<string>("CpuArchitecture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CpuCores")
                        .HasColumnType("integer");

                    b.Property<string>("CpuModel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("CpuSpeedGHz")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DiskModel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GpuMemoryMB")
                        .HasColumnType("integer");

                    b.Property<string>("GpuModel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RamModel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TotalDiskMB")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalMemoryMB")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AgentId")
                        .IsUnique();

                    b.ToTable("Hardware");
                });

            modelBuilder.Entity("Server.Domain.Models.Policy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RegistryKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RegistryKeyType")
                        .HasColumnType("integer");

                    b.Property<string>("RegistryPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RegistryValueType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Policies");
                });

            modelBuilder.Entity("Server.Domain.Models.PolicyInConfiguration", b =>
                {
                    b.Property<long>("ConfigurationId")
                        .HasColumnType("bigint");

                    b.Property<long>("PolicyId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RegistryValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ConfigurationId", "PolicyId");

                    b.HasIndex("PolicyId");

                    b.ToTable("PolicyInConfiguration");
                });

            modelBuilder.Entity("Server.Domain.Models.Process", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("Server.Domain.Models.ProcessInConfiguration", b =>
                {
                    b.Property<long>("ConfigurationId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProcessId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProcessState")
                        .HasColumnType("integer");

                    b.HasKey("ConfigurationId", "ProcessId");

                    b.HasIndex("ProcessId");

                    b.ToTable("ProcessInConfiguration");
                });

            modelBuilder.Entity("Server.Domain.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Server.Domain.Models.Agent", b =>
                {
                    b.HasOne("Server.Domain.Models.Configuration", "Configuration")
                        .WithMany("Agents")
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Configuration");
                });

            modelBuilder.Entity("Server.Domain.Models.Hardware", b =>
                {
                    b.HasOne("Server.Domain.Models.Agent", "Agent")
                        .WithOne("Hardware")
                        .HasForeignKey("Server.Domain.Models.Hardware", "AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("Server.Domain.Models.PolicyInConfiguration", b =>
                {
                    b.HasOne("Server.Domain.Models.Configuration", "Configuration")
                        .WithMany("Policies")
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Domain.Models.Policy", "Policy")
                        .WithMany("Configurations")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Configuration");

                    b.Navigation("Policy");
                });

            modelBuilder.Entity("Server.Domain.Models.ProcessInConfiguration", b =>
                {
                    b.HasOne("Server.Domain.Models.Configuration", "Configuration")
                        .WithMany("Processes")
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Domain.Models.Process", "Process")
                        .WithMany("Configurations")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Configuration");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("Server.Domain.Models.Agent", b =>
                {
                    b.Navigation("Hardware")
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Domain.Models.Configuration", b =>
                {
                    b.Navigation("Agents");

                    b.Navigation("Policies");

                    b.Navigation("Processes");
                });

            modelBuilder.Entity("Server.Domain.Models.Policy", b =>
                {
                    b.Navigation("Configurations");
                });

            modelBuilder.Entity("Server.Domain.Models.Process", b =>
                {
                    b.Navigation("Configurations");
                });
#pragma warning restore 612, 618
        }
    }
}
